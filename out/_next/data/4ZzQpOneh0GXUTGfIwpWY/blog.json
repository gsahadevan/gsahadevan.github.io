{"pageProps":{"posts":[{"data":{"title":"How to use marks in nvim","excerpt":"Speed up the your development using marks in nvim","date":"2024-05-03T19:35:07.322Z","draft":false,"tags":["vim","nvim","marks"]},"content":"\n# Intro\n\nGoing to cover marks in nvim, which could also be thought of as bookmarks. Marks is a core vim feature, so it doesn't require any special plugins. The marks feature allows us to easily move / jump around important points in a file (or in different files).\n\n# How I use it?\n\nAs a developer; I would be working on a feature, the code for which would span across multiple files. I would create marks for certain positions in a single file or across multiple files. This would help me jump around these positions, saving me countless minutes in switching between the files if I had to do it manually.\n\nMarks are used on the normal mode. So if I use `m` followed by a character, let's say `a`, it would mark the exact location. I can view the existing marks by using the `:marks` command. The uppercase marks `'A` to `'Z` include the file name. So kind of a global mark. I use it to jump across files.\n\nSince I use telescope I could also see all my marks in the telescope window. I also see a small preview of where my marks are. I could also move on the list to choose the mark I want. \n\n### Deleting marks\n\nI rarely delete marks. Lowercase marks `'a` to `'z` are remembered as long as the file remains in the buffer list. If the file is removed from the buffer list, all its marks are lost. If the line containing the mark is deleted, the mark is erased. They are also restored when using undo and redo.\n\n### Using operators along with marks\n\nThe lowercase marks can be used in combination with operators as well. For example: `d't` would delete the lines from the cursor position to the mark `t`. Generally I would use mark `t` for top and `b` for bottom etc.\n\n# List of commands useful for marks\n\n```shell\nCommand       | Operation\n--------------|----------------------------------------------------------\nm{a-zA-Z}     | Sets the mark, for example `ma`\n'a            | Go to the mark set at `a`, the cursor would be positioned on the first non-blank character in the line\n`a            | Go to the mark set at `a`, the cursor would be positioned on the exact location\n]'            | Go to the next lowercase mark set, cursor positioned on the first non-blank character in the line\n]`            | Go to the next lowercase mark set, cursor positioned on the exact location\n['            | Go to the previous lowercase mark set, cursor positioned on the first non-blank character in the line\n[`            | Go to the previous lowercase mark set, cursor positioned on the exact location\n:marks        | Shows the list of marks\n:marks a      | Shows the list of mark at a\n:marks ab     | Shows the list of marks at a and b\n:marks a-c    | Shows the list of marks at a, b and c\n:delmarks a   | Deletes the mark at a\n:delmarks ab  | Deletes the mark at a and b\n:delmarks a-c | Deletes the mark at a, b and c\n:delmarks!    | Deletes all marks for current buffer (with lowercase {a-z})\n```\n\n# References and further reading\n1. [Marks in Vim Are A Game Changer](https://www.youtube.com/watch/XT_kFia3Ua4)\n2. [Marks & Folds - Vim Tips (5)](https://www.youtube.com/watch?v=ovRqGybIg1Q&ab_channel=BenKadel)\n3. :help marks\n4. [Plugin to view marks on the sign column](https://github.com/chentoast/marks.nvim)\n\n### Further reading, related topics\n1. Jumps\n2. Changes\n","slug":"nvim-marks"},{"data":{"title":"SOLID Principles - Open/Closed Principle","excerpt":"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.","date":"2023-12-19T05:35:07.322Z","draft":false,"tags":["solid","srp"]},"content":"\n\n# SOLID Principles - Single Responsibility Principles\n\nSingle responsibility principle gives way for easier software implementation and helps prevent un-expected side effects of future modifications. It is an important rule to make the code more understandable.\n\nRobert C. Martin describes it as:\n> A class should have one, and only one, reason to change.\n\n## Cause and effect\nSoftware requirement would change over time. I have been working with my current organisation for two years and I have been involved with changing the core business flow thrice. We have multiple ui components and business modules. Each new change request would involve changes to the responsibility of at least one component (if not many). If a component has more responsibilities, the likelihood of modifying the component increases. If the component has multiple responsibilities, they are no longer independent of each other.\n\nSometimes, it so happens that even a simple feature request becomes so complex that changing a component creates more side effects, and requires a lot more testing time than it should have had initially.\n\nIt is better to avoid these problems by making sure each component has only one responsibility. If a component has only one responsibility it is easier to explain, understand and maintain. Validation becomes easier, developers can easily write unit tests. It also helps improve the development speed and might reduce the number of bugs.\n\n## How to identify a SRP use-case\nWhen we receive a new feature request, in the urge to complete the requirement fast, developers often have the tendency to take the easiest and fastest approach. Which might be to add a method or functionality to the existing code, instead of writing a new class or component. This would result in a class or component to have more than one responsibility. Overtime it would become difficult to maintain the codebase.\n\nWe avoid this by asking a simple question before making the change (usually on our white boarding sessions).\n\n**What is the responsibility of the class/component/microservice/?**\n\nIf the answer includes the word \"and\", then we are most likely breaking the SRP. We usually would re-think the current approach.\n\nWe generally tend to associate each class with a certain pet name, we address the class as him/her/their and give a certain role and responsibility. Basically the actor gets a role.\n\n## When to avoid\nA developer should make sure not to oversimply the code. In extreme cases, a component would have just one function. Which is also not ideal. This would lead to increased dependency injections which would in-turn make the code very unreadable and confusing. Defeating the whole purpose of single responsibility.\n\n## Examples\n","slug":"solid-principles-open-closed"},{"data":{"title":"SOLID Principles - Single Responsibility Principle","excerpt":"A class should have one, and only one, reason to change.","date":"2023-12-18T05:35:07.322Z","draft":false,"tags":["solid","srp"]},"content":"\n\n# SOLID Principles - Single Responsibility Principles\n\nSingle responsibility principle gives way for easier software implementation and helps prevent un-expected side effects of future modifications. It is an important rule to make the code more understandable.\n\nRobert C. Martin describes it as:\n> A class should have one, and only one, reason to change.\n\n## Cause and effect\nSoftware requirement would change over time. I have been working with my current organisation for two years and I have been involved with changing the core business flow thrice. We have multiple ui components and business modules. Each new change request would involve changes to the responsibility of at least one component (if not many). If a component has more responsibilities, the likelihood of modifying the component increases. If the component has multiple responsibilities, they are no longer independent of each other.\n\nSometimes, it so happens that even a simple feature request becomes so complex that changing a component creates more side effects, and requires a lot more testing time than it should have had initially.\n\nIt is better to avoid these problems by making sure each component has only one responsibility. If a component has only one responsibility it is easier to explain, understand and maintain. Validation becomes easier, developers can easily write unit tests. It also helps improve the development speed and might reduce the number of bugs.\n\n## How to identify a SRP use-case\nWhen we receive a new feature request, in the urge to complete the requirement fast, developers often have the tendency to take the easiest and fastest approach. Which might be to add a method or functionality to the existing code, instead of writing a new class or component. This would result in a class or component to have more than one responsibility. Overtime it would become difficult to maintain the codebase.\n\nWe avoid this by asking a simple question before making the change (usually on our white boarding sessions).\n\n**What is the responsibility of the class/component/microservice/?**\n\nIf the answer includes the word \"and\", then we are most likely breaking the SRP. We usually would re-think the current approach.\n\nWe generally tend to associate each class with a certain pet name, we address the class as him/her/their and give a certain role and responsibility. Basically the actor gets a role.\n\n## When to avoid\nA developer should make sure not to oversimply the code. In extreme cases, a component would have just one function. Which is also not ideal. This would lead to increased dependency injections which would in-turn make the code very unreadable and confusing. Defeating the whole purpose of single responsibility.\n\n## Examples\n","slug":"solid-principles-single-responsibility"},{"data":{"title":"Why I use Nvim?","excerpt":"My personal experience with Nvim, why I love it so much?","date":"2023-09-21T05:35:07.322Z","draft":false,"tags":["vim","nvim"]},"content":"\n\n# Why I use Nvim?\n\nI have tried many editors during my career as a Software Developer. I keep switching between them, I guess at some level Neovim gave the sense of flexibility without actually having to switch to another editor.\nI got to love the h,j,k,l motions and started to hate to move my hand to reach the mouse.\n\n![Nvim Configuration](../images/nvim-config.png)\n\n## Finding the true love\n\nI was learning React, back in 2016. I was following the tutorials in YouTube, link here. The author was initially using Atom and later switched to vim. I knew what vim was, but never knew vim could be configured to be used as an editor. I followed his git repository and understood basic configurations. Back then I didn't even know what a dotfile was.\n\n## Customizing VS Code\n\nI had customized vs code a bit too much, some of the plugins had speacial configs. I did find it difficult to switch betweeen the work and personal settings. Though I could port the settings file, it is still not as convinient as using dotfiles. One could argue, saying this is a one time setting. \n- I feel vs code is still too cluttered. Too many elements are shown on the IDE which a developer might never use. Even the zen mode is not so zen.\n- I do love the icons, color theme options available for vs code.\n- However, the biggest issue I have with vs code is that in my office setup the update would run on the background without me knowing about and it would crash the entire session in the middle. I wouldn't be able to save or do anything other than force quit and re-open the application altogther.\n\n","slug":"why-i-use-neovim"},{"data":{"title":"Frequently used Git commands","excerpt":"Frequently used Git commands in my day-to-day life.","date":"2023-09-17T05:35:07.322Z","draft":false,"tags":["git"]},"content":"\n\n# Frequently used Git commands\n\n```shell\ngit remote set-url origin https://[username]:[personal-access-token]@github.com/[username]/[branch-name].git\ngit clone https://[username]:[personal-access-token]@github.com/[username]/[branch-name].git\ngit clone https://[username]@github.com/[username]/[branch-name].git\n\ngit branch -d [branch-name]                       # delete local branch\ngit branch -D [branch-name]                       # force delete local branch\ngit branch -d `git branch --list 'branch-name-*'` # delete multiple local branches with wildcard\n\ngit stash          # save modified and staged changes to stash (stack)\ngit stash list     # list stashed file changes\ngit stash pop      # merge changes from top of stack to current branch\ngit stash drop     # delete stash from top of stack\n\ngit pull\ngit pull origin master --no-rebase\ngit pull origin main --no-rebase\ngit pull origin [branch-name] --no-rebase\n```\n","slug":"git-commands"},{"data":{"title":"This is a Draft Post","excerpt":"This is an example of a draft post. It is only visible in the local dev environment.","date":"2020-03-18T05:35:07.322Z","draft":true,"tags":["draft"]},"content":"\n\n# This is a draft\n\nYou can mark a post as a draft by adding `draft: true` to the front matter of the post and then it will only display in the local dev environment.\n\n```js\nfunction sample() {\n    console.log('hello world');\n}\n```","slug":"draft"}]},"__N_SSG":true}